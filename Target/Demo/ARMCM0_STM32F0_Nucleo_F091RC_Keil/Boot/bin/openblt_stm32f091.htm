<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\bin\openblt_stm32f091.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\bin\openblt_stm32f091.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Nov 27 16:44:39 2020
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BootTask &rArr; ComTask &rArr; XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[40]">AssertFailure</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">AssertFailure</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC1_COMP_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[29]">CEC_CAN_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[14]">DMA1_Ch1_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[15]">DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[16]">DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[10]">EXTI0_1_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[11]">EXTI2_3_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[12]">EXTI4_15_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[22]">I2C1_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[23]">I2C2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[c]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[25]">SPI2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from timer.o(i.SysTick_Handler) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f091.o(.text)
 <LI><a href="#[1e]">TIM14_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[1f]">TIM15_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[20]">TIM16_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[21]">TIM17_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[18]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[19]">TIM1_CC_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[1b]">TIM3_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[1c]">TIM6_DAC_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[1d]">TIM7_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[13]">TSC_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[26]">USART1_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[27]">USART2_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[28]">USART3_8_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f091.o(.text) referenced from startup_stm32f091.o(RESET)
 <LI><a href="#[2c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f091.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[34]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[da]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[db]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[31]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[33]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[35]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BootTask &rArr; ComTask &rArr; XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[38]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[e6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA1_Ch1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USART3_8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f091.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f091.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[e7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGetSpeedConfig
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[37]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>AssertFailure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, assert.o(i.AssertFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = AssertFailure &rArr;  AssertFailure (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitPacket
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[f2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>BackDoorCheck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, backdoor.o(i.BackDoorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BackDoorCheck &rArr; CpuStartUserProgram &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIsConnected
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootTask
</UL>

<P><STRONG><a name="[46]"></a>BackDoorInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, backdoor.o(i.BackDoorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BackDoorInit &rArr; BackDoorCheck &rArr; CpuStartUserProgram &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorRestartTimer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
</UL>

<P><STRONG><a name="[47]"></a>BackDoorRestartTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, backdoor.o(i.BackDoorRestartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BackDoorRestartTimer &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorInit
</UL>

<P><STRONG><a name="[48]"></a>BootInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, boot.o(i.BootInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BootInit &rArr; ComInit &rArr; CanInit &rArr; CanGetSpeedConfig &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComInit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>BootTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boot.o(i.BootTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BootTask &rArr; ComTask &rArr; XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorCheck
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>CanInit</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, can.o(i.CanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CanInit &rArr; CanGetSpeedConfig &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGetSpeedConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComInit
</UL>

<P><STRONG><a name="[58]"></a>CanReceivePacket</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, can.o(i.CanReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CanReceivePacket &rArr; HAL_CAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask
</UL>

<P><STRONG><a name="[5a]"></a>CanTransmitPacket</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, can.o(i.CanTransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CanTransmitPacket &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IsTxMessagePending
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTransmitPacket
</UL>

<P><STRONG><a name="[6d]"></a>ComFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, com.o(i.ComFree))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[b2]"></a>ComGetActiveInterfaceMaxRxLen</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, com.o(i.ComGetActiveInterfaceMaxRxLen))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdUpload
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdShortUpload
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramMax
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgram
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdConnect
</UL>

<P><STRONG><a name="[b3]"></a>ComGetActiveInterfaceMaxTxLen</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, com.o(i.ComGetActiveInterfaceMaxTxLen))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdConnect
</UL>

<P><STRONG><a name="[4d]"></a>ComInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com.o(i.ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ComInit &rArr; CanInit &rArr; CanGetSpeedConfig &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
</UL>

<P><STRONG><a name="[43]"></a>ComIsConnected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, com.o(i.ComIsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIsConnected
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpIsConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorCheck
</UL>

<P><STRONG><a name="[50]"></a>ComTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, com.o(i.ComTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ComTask &rArr; XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232ReceivePacket
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReceivePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootTask
</UL>

<P><STRONG><a name="[62]"></a>ComTransmitPacket</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(i.ComTransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ComTransmitPacket &rArr; CanTransmitPacket &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketTransmitted
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitPacket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpTransmitPacket
</UL>

<P><STRONG><a name="[4a]"></a>CopInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cop.o(i.CopInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CopInit &rArr; CopInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
</UL>

<P><STRONG><a name="[65]"></a>CopInitHook</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hooks.o(i.CopInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlinkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopInit
</UL>

<P><STRONG><a name="[41]"></a>CopService</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cop.o(i.CopService))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopServiceHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootTask
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitByte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSectorSize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSectorBaseAddr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSector
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAddToBlock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpComputeChecksum
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitPacket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitPacket
</UL>

<P><STRONG><a name="[67]"></a>CopServiceHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hooks.o(i.CopServiceHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlinkTask
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>

<P><STRONG><a name="[49]"></a>CpuInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cpu.o(i.CpuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CpuInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuIrqDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
</UL>

<P><STRONG><a name="[69]"></a>CpuIrqDisable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_comp.o(i.CpuIrqDisable))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[71]"></a>CpuIrqEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_comp.o(i.CpuIrqEnable))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[6a]"></a>CpuMemCopy</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cpu.o(i.CpuMemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInitBlock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdUpload
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdShortUpload
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232ReceivePacket
</UL>

<P><STRONG><a name="[45]"></a>CpuStartUserProgram</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cpu.o(i.CpuStartUserProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CpuStartUserProgram &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuUserProgramStartHook
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerReset
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmVerifyChecksum
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmGetUserProgBaseAddress
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuIrqEnable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComFree
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorCheck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramReset
</UL>

<P><STRONG><a name="[6c]"></a>CpuUserProgramStartHook</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hooks.o(i.CpuUserProgramStartHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CpuUserProgramStartHook
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlinkExit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[89]"></a>FLASH_PageErase</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[73]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[79]"></a>FlashDone</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash.o(i.FlashDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FlashDone &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDone
</UL>

<P><STRONG><a name="[7b]"></a>FlashErase</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, flash.o(i.FlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FlashErase &rArr; FlashEraseSectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSector
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmErase
</UL>

<P><STRONG><a name="[a6]"></a>FlashGetUserProgBaseAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash.o(i.FlashGetUserProgBaseAddress))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmGetUserProgBaseAddress
</UL>

<P><STRONG><a name="[a7]"></a>FlashInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.FlashInit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmInit
</UL>

<P><STRONG><a name="[a8]"></a>FlashVerifyChecksum</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash.o(i.FlashVerifyChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmVerifyChecksum
</UL>

<P><STRONG><a name="[83]"></a>FlashWrite</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flash.o(i.FlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSector
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAddToBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteChecksum
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
</UL>

<P><STRONG><a name="[85]"></a>FlashWriteChecksum</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, flash.o(i.FlashWriteChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDone
</UL>

<P><STRONG><a name="[5b]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 252 bytes, Stack size 20 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitPacket
</UL>

<P><STRONG><a name="[56]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[59]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanReceivePacket
</UL>

<P><STRONG><a name="[55]"></a>HAL_CAN_Init</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_CAN_Init &rArr; HAL_GetTick &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[5c]"></a>HAL_CAN_IsTxMessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_IsTxMessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitPacket
</UL>

<P><STRONG><a name="[86]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_CAN_Start</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f0xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Start &rArr; HAL_GetTick &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[6e]"></a>HAL_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DeInit &rArr; HAL_MspDeInit &rArr; LL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[81]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>

<P><STRONG><a name="[82]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>

<P><STRONG><a name="[84]"></a>HAL_FLASH_Program</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
</UL>

<P><STRONG><a name="[80]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>

<P><STRONG><a name="[74]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, timer.o(i.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GetTick &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_MspDeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.HAL_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspDeInit &rArr; LL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[8e]"></a>HAL_MspInit</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, main.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_MspInit &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[91]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8f]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[90]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[93]"></a>LL_GPIO_DeInit</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_ReleaseReset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[96]"></a>LL_GPIO_Init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[92]"></a>LL_RCC_DeInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>

<P><STRONG><a name="[52]"></a>LL_RCC_GetSystemClocksFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetSystemClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanGetSpeedConfig
</UL>

<P><STRONG><a name="[9f]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[ad]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_ll_utils.o(i.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a3]"></a>LL_USART_Init</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32f0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232Init
</UL>

<P><STRONG><a name="[72]"></a>LedBlinkExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(i.LedBlinkExit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuUserProgramStartHook
</UL>

<P><STRONG><a name="[66]"></a>LedBlinkInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(i.LedBlinkInit))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopInitHook
</UL>

<P><STRONG><a name="[68]"></a>LedBlinkTask</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(i.LedBlinkTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopServiceHook
</UL>

<P><STRONG><a name="[a4]"></a>NvmDone</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nvm.o(i.NvmDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteChecksum
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDone
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgram
</UL>

<P><STRONG><a name="[a5]"></a>NvmErase</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvm.o(i.NvmErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NvmErase &rArr; FlashErase &rArr; FlashEraseSectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramClear
</UL>

<P><STRONG><a name="[70]"></a>NvmGetUserProgBaseAddress</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvm.o(i.NvmGetUserProgBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmGetUserProgBaseAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetUserProgBaseAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[4c]"></a>NvmInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvm.o(i.NvmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdConnect
</UL>

<P><STRONG><a name="[6b]"></a>NvmVerifyChecksum</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvm.o(i.NvmVerifyChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmVerifyChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashVerifyChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>

<P><STRONG><a name="[a9]"></a>NvmWrite</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nvm.o(i.NvmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NvmWrite &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramMax
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgram
</UL>

<P><STRONG><a name="[9d]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[9e]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[9c]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
</UL>

<P><STRONG><a name="[aa]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[5e]"></a>Rs232Init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, rs232.o(i.Rs232Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Rs232Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComInit
</UL>

<P><STRONG><a name="[61]"></a>Rs232ReceivePacket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, rs232.o(i.Rs232ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Rs232ReceivePacket &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232ReceiveByte
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask
</UL>

<P><STRONG><a name="[63]"></a>Rs232TransmitPacket</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rs232.o(i.Rs232TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Rs232TransmitPacket &rArr; Rs232TransmitByte &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTransmitPacket
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f091.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>TimerGet</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, timer.o(i.TimerGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorRestartTimer
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BackDoorCheck
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedBlinkTask
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitByte
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232ReceivePacket
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanTransmitPacket
</UL>

<P><STRONG><a name="[4b]"></a>TimerInit</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, timer.o(i.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerReset
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
</UL>

<P><STRONG><a name="[6f]"></a>TimerReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.TimerReset))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>

<P><STRONG><a name="[4f]"></a>TimerUpdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootTask
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>

<P><STRONG><a name="[5d]"></a>XcpInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xcp.o(i.XcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComInit
</UL>

<P><STRONG><a name="[5f]"></a>XcpIsConnected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xcp.o(i.XcpIsConnected))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIsConnected
</UL>

<P><STRONG><a name="[60]"></a>XcpPacketReceived</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, xcp.o(i.XcpPacketReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpTransmitPacket
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdUpload
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdSynch
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdShortUpload
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdSetMta
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramStart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramPrepare
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramMax
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramClear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgram
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdGetStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdGetId
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdDisconnect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdConnect
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdBuildCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTask
</UL>

<P><STRONG><a name="[64]"></a>XcpPacketTransmitted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xcp.o(i.XcpPacketTransmitted))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTransmitPacket
</UL>

<P><STRONG><a name="[bf]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = main &rArr; BootTask &rArr; ComTask &rArr; XcpPacketReceived &rArr; XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootTask
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[97]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8b]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_HalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[75]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[88]"></a>FLASH_MassErase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[9a]"></a>LL_AHB1_GRP1_ForceReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_ll_gpio.o(i.LL_AHB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
</UL>

<P><STRONG><a name="[9b]"></a>LL_AHB1_GRP1_ReleaseReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_ll_gpio.o(i.LL_AHB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_DeInit
</UL>

<P><STRONG><a name="[a0]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[a1]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[a2]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[98]"></a>Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Init &rArr; HAL_Init &rArr; HAL_MspInit &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[95]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[99]"></a>SystemClock_Config</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemClock_Config &rArr; AssertFailure &rArr;  AssertFailure (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AssertFailure
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[ae]"></a>XcpCmdBuildCheckSum</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdBuildCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XcpCmdBuildCheckSum &rArr; XcpComputeChecksum &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpComputeChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b0]"></a>XcpCmdConnect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XcpCmdConnect &rArr; NvmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpProtectResources
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxTxLen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b4]"></a>XcpCmdDisconnect</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XcpCmdDisconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpProtectResources
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[c1]"></a>XcpCmdGetId</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xcp.o(i.XcpCmdGetId))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[c2]"></a>XcpCmdGetStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xcp.o(i.XcpCmdGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b5]"></a>XcpCmdProgram</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = XcpCmdProgram &rArr; NvmDone &rArr; FlashWriteChecksum &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDone
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b7]"></a>XcpCmdProgramClear</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdProgramClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = XcpCmdProgramClear &rArr; NvmErase &rArr; FlashErase &rArr; FlashEraseSectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b8]"></a>XcpCmdProgramMax</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdProgramMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = XcpCmdProgramMax &rArr; NvmWrite &rArr; FlashWrite &rArr; FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[b9]"></a>XcpCmdProgramPrepare</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdProgramPrepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XcpCmdProgramPrepare
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[ba]"></a>XcpCmdProgramReset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdProgramReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = XcpCmdProgramReset &rArr; CpuStartUserProgram &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuStartUserProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[bb]"></a>XcpCmdProgramStart</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdProgramStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XcpCmdProgramStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[c0]"></a>XcpCmdSetMta</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xcp.o(i.XcpCmdSetMta))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[bc]"></a>XcpCmdShortUpload</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdShortUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XcpCmdShortUpload &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[bd]"></a>XcpCmdSynch</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xcp.o(i.XcpCmdSynch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XcpCmdSynch
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[be]"></a>XcpCmdUpload</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xcp.o(i.XcpCmdUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XcpCmdUpload &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpSetCtoError
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComGetActiveInterfaceMaxRxLen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[af]"></a>XcpComputeChecksum</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, xcp.o(i.XcpComputeChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = XcpComputeChecksum &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdBuildCheckSum
</UL>

<P><STRONG><a name="[b1]"></a>XcpProtectResources</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xcp.o(i.XcpProtectResources))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdDisconnect
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdConnect
</UL>

<P><STRONG><a name="[b6]"></a>XcpSetCtoError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xcp.o(i.XcpSetCtoError))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdUpload
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdSynch
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdShortUpload
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramPrepare
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramMax
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgramClear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpCmdProgram
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[c3]"></a>XcpTransmitPacket</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, xcp.o(i.XcpTransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = XcpTransmitPacket &rArr; ComTransmitPacket &rArr; CanTransmitPacket &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComTransmitPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XcpPacketReceived
</UL>

<P><STRONG><a name="[51]"></a>CanGetSpeedConfig</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, can.o(i.CanGetSpeedConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CanGetSpeedConfig &rArr; LL_RCC_GetSystemClocksFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSystemClocksFreq
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInit
</UL>

<P><STRONG><a name="[76]"></a>FlashAddToBlock</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, flash.o(i.FlashAddToBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashAddToBlock &rArr; FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSwitchBlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInitBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[7d]"></a>FlashEraseSectors</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, flash.o(i.FlashEraseSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FlashEraseSectors &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSectorSize
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSectorBaseAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[7c]"></a>FlashGetSector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, flash.o(i.FlashGetSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashGetSector &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
</UL>

<P><STRONG><a name="[7e]"></a>FlashGetSectorBaseAddr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash.o(i.FlashGetSectorBaseAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashGetSectorBaseAddr &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>

<P><STRONG><a name="[7f]"></a>FlashGetSectorSize</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flash.o(i.FlashGetSectorSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FlashGetSectorSize &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>

<P><STRONG><a name="[77]"></a>FlashInitBlock</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash.o(i.FlashInitBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FlashInitBlock &rArr; CpuMemCopy &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuMemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSwitchBlock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAddToBlock
</UL>

<P><STRONG><a name="[78]"></a>FlashSwitchBlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, flash.o(i.FlashSwitchBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FlashSwitchBlock &rArr; FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWriteBlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInitBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashAddToBlock
</UL>

<P><STRONG><a name="[7a]"></a>FlashWriteBlock</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, flash.o(i.FlashWriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FlashWriteBlock &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDone
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashSwitchBlock
</UL>

<P><STRONG><a name="[ab]"></a>Rs232ReceiveByte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rs232.o(i.Rs232ReceiveByte))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232ReceivePacket
</UL>

<P><STRONG><a name="[ac]"></a>Rs232TransmitByte</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rs232.o(i.Rs232TransmitByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Rs232TransmitByte &rArr; CopService &rArr; CopServiceHook &rArr; LedBlinkTask &rArr; TimerGet
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopService
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGet
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs232TransmitPacket
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
